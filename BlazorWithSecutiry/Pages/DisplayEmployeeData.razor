@page "/DisplayEmployeeData"

@using BlazorWithSecutiry.Service
@using BlazorWithSecutiry.Models
@using Microsoft.Extensions.Logging;

@inject EmployeeService employeeService
@inject CourseService CourseService
@inject ILogger<DisplayEmployeeData> Logger
@inject IJSRuntime JSRuntime;

<style>
    .table {
        margin-top: 25px;
    }
</style>

<div class="container-fluid">
    <ul class="breadcrumb">
        <li class="breadcrumb-item"><a href="index.html"><span class="fa fa-home"></span>Home</a></li>
        <li class="breadcrumb-item active">Tables</li>
    </ul>
</div>
<section class="no-padding-top">
    <div class="container-fluid">
        <div class="block">
            <div class="title">
                <strong>Employees</strong>
                <div style="float:right">
                    <button class="btn btn-primary" @onclick="@AddEmp">Add Employee</button>
                </div>
            </div>
            <div class="block-body">
                <div class="table-responsive">
                    <table id="employeeDT" style="width: 100%;" class="table table-striped table-sm">
                        <thead>
                            <tr>
                                <th>Employee Id</th>
                                <th>First Name</th>
                                <th>Last Name</th>
                                <th>DOB</th>
                                <th>Phone Number</th>
                                <th>Email</th>
                                <th>Gender</th>
                                <th>Department</th>
                                <th>City</th>
                                <th>Total Credits</th>
                                <th>
                                    Employee Action
                                </th>
                                <th>
                                    Course Action
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var emp in empList)
                            {
                                <tr>
                                    <td>@emp.EmployeeId</td>
                                    <td>@emp.FirstName</td>
                                    <td>@emp.LastName</td>
                                    <td>@emp.DateOfBirth</td>
                                    <td>@emp.PhoneNumber</td>
                                    <td>@emp.Email</td>
                                    <td>@emp.Gender</td>
                                    <td>@emp.Department</td>
                                    <td>@emp.City</td>
                                    <td>
                                        @CountCredits(emp.EmployeeId)
                                    </td>
                                    <td>
                                        <button class="btn btn-warning" @onclick="@(async () => await EditEmployee(@emp.EmployeeId))">Edit</button>
                                        <button class="btn btn-danger" @onclick="@(async () => await DeleteConfirm(@emp.EmployeeId))">Remove</button>

                                    </td>
                                    <td>
                                        <button class="btn btn-success" @onclick="@(async () => await LinkCoursesConfirm(@emp.EmployeeId))">Add</button>
                                        <button class="btn btn-danger" @onclick="@(async () => await DeLinkCoursesConfirm(@emp.EmployeeId))">Remove</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    protected long selectedEmployeeId = 0;
    protected List<Employee> empList;
    protected List<Cities> cityList = new List<Cities>();
    protected List<Courses> courseList = new List<Courses>();

    protected List<Courses> employeeCourseList = new List<Courses>();
    public List<string> EmployeeCourses { get; set; } = new List<string>();

    protected Employee emp = new Employee();
    protected string modalTitle { get; set; }
    protected Boolean isDelete = false;
    protected Boolean isAdd = false;
    protected Boolean isLink = false;

    protected Boolean LinkAction = false;

    protected string SearchString { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetCities();
        await GetEmployee();
        await GetCourses();
    }

    protected async Task GetCities()
    {
        try
        {
            cityList = await employeeService.GetCities();
        }
        catch (Exception ex)
        {
            ErrorMessage("GetCities", ex.Message);
        }
    }

    protected async Task GetEmployee()
    {
        try
        {
            empList = await employeeService.GetEmployeeList();
        }
        catch (Exception ex)
        {
            ErrorMessage("GetEmployee", ex.Message);
        }
    }

    protected async Task GetCourses()
    {
        try
        {
            courseList = await employeeService.GetCourses();
        }
        catch (Exception ex)
        {
            ErrorMessage("GetCourses", ex.Message);
        }
    }

    protected async Task FilterEmp()
    {

        try
        {
            await GetEmployee();
            if (SearchString != "")
            {
                empList = empList.Where(x => x.FirstName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
            }

        }
        catch (Exception ex)
        {
            ErrorMessage("FilterEmp", ex.Message);
        }
    }

    protected void AddEmp()
    {


        try
        {
            emp = new Employee();
            this.modalTitle = "Add Employee";
            this.isAdd = true;
        }
        catch (Exception ex)
        {
            ErrorMessage("AddEmp", ex.Message);
        }
    }

    protected async Task EditEmployee(long empID)
    {

        try
        {
            emp = await employeeService.Details(Convert.ToInt32(empID));
            this.modalTitle = "Edit Employee";
            this.isAdd = true;

        }
        catch (Exception ex)
        {
            ErrorMessage("EditEmployee", ex.Message);
        }
    }

    protected async Task SaveEmployee()
    {
        try
        {
            if (emp.EmployeeId != 0)
            {
                await Task.Run(() =>
                {
                    employeeService.Edit(emp);
                });
            }
            else
            {
                await Task.Run(() =>
                {
                    employeeService.Create(emp);
                });
            }
            this.isAdd = false;
            await GetEmployee();
        }
        catch (Exception ex)
        {
            ErrorMessage("SaveEmployee", ex.Message);
        }
    }

    protected async Task DeleteConfirm(long empID)
    {


        try
        {
            emp = await employeeService.Details(Convert.ToInt32(empID));
            this.isDelete = true;
        }
        catch (Exception ex)
        {
            ErrorMessage("DeleteConfirm", ex.Message);
        }
    }

    protected async Task DeleteEmployee(long empID)
    {


        try
        {
            await Task.Run(() =>
       {
           employeeService.Delete(Convert.ToInt32(empID));
       });
            this.isDelete = false;
            await GetEmployee();
        }
        catch (Exception ex)
        {
            ErrorMessage("DeleteEmployee", ex.Message);
        }
    }

    protected void CloseModal()
    {
        this.isAdd = false;
        this.isDelete = false;
        this.isLink = false;
    }

    void CheckboxClicked(int CourseId, object checkedValue)
    {
        try
        {
            if ((bool)checkedValue)
            {
                if (!EmployeeCourses.Contains(CourseId.ToString()))
                {
                    EmployeeCourses.Add(CourseId.ToString());
                }
            }
            else
            {
                if (EmployeeCourses.Contains(CourseId.ToString()))
                {
                    EmployeeCourses.Remove(CourseId.ToString());
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage("CheckboxClicked", ex.Message);
        }
    }

    protected async Task LinkCoursesConfirm(long empID)
    {
        try
        {

            this.isLink = true;
            this.modalTitle = "Link Employee";
            this.selectedEmployeeId = empID;
            this.LinkAction = true;
            employeeCourseList = await CourseService.GetEmployeeCourses(empID, true);

        }
        catch (Exception ex)
        {
            ErrorMessage("LinkCoursesConfirm", ex.Message);
        }
    }

    protected async Task DeLinkCoursesConfirm(long empID)
    {
        try
        {
            this.isLink = true;
            this.modalTitle = "De-Link Employee";
            this.selectedEmployeeId = empID;
            this.LinkAction = false;

            employeeCourseList = await CourseService.GetEmployeeCourses(empID, false);
        }
        catch (Exception ex)
        {
            ErrorMessage("DeLinkCoursesConfirm", ex.Message);
        }
    }

    protected async Task LinkCourses(long empID, bool linkAction)
    {
        try
        {
            CourseService.LinkCourses(empID, EmployeeCourses, linkAction);

            this.isLink = false;
            await GetEmployee();
        }
        catch (Exception ex)
        {
            ErrorMessage("LinkCourses", ex.Message);
        }

    }

    protected double CountCredits(long Id)
    {
        var count = 0.0;
        try
        {
            count = CourseService.CountCredits(Id);
            return count;
        }
        catch (Exception ex)
        {
            ErrorMessage("CountCredits", ex.Message);
        }

        return count;
    }

    protected void ErrorMessage(string header, string Errormessage)
    {
        var message = header + ": " + Errormessage;
        JSRuntime.InvokeVoidAsync("ShowErrorMessage", message);

        Logger.LogWarning(Errormessage, message);
    }
}
