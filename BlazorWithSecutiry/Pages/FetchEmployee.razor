@page "/FetchEmployee"

@using BlazorWithSecutiry.Service
@using BlazorWithSecutiry.Models
@using Microsoft.Extensions.Logging;

@inject EmployeeService employeeService
@inject CourseService CourseService
@inject ILogger<FetchEmployee> Logger
@inject IJSRuntime JSRuntime;

<style>
    .table {
        margin-top: 25px;
    }
</style>
<!-- Services section -->
<section class="contact-section spad">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <AuthorizeView>
                    <Authorized>
                        <div>
                            <div style="float:left">
                                <button class="btn btn-primary" @onclick="@AddEmp">Add Employee</button>
                            </div>
                            <div style="float:right; width:40%;">
                                <div class="col-sm-6" style="float:left">
                                    <input class="form-control" type="text" placeholder="Search" @bind="@SearchString" />
                                </div>
                                <div>
                                    <button type="submit" class="btn btn-default btn-info" @onclick="@FilterEmp">Filter</button>
                                </div>
                            </div>
                        </div>
                        <div style="padding-top:25px">

                            @if (empList == null)
                            {
                                <p><em>Loading...</em></p>
                            }
                            else
                            {
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Employee Id</th>
                                            <th>First Name</th>
                                            <th>Last Name</th>
                                            <th>DOB</th>
                                            <th>Phone Number</th>
                                            <th>Email</th>
                                            <th>Gender</th>
                                            <th>Department</th>
                                            <th>City</th>
                                            <th>Total Credits</th>
                                            <th>
                                                Employee Action
                                            </th>
                                            <th>
                                                Course Action
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var emp in empList)
                                        {
                                            <tr>
                                                <td>@emp.EmployeeId</td>
                                                <td>@emp.FirstName</td>
                                                <td>@emp.LastName</td>
                                                <td>@emp.DateOfBirth</td>
                                                <td>@emp.PhoneNumber</td>
                                                <td>@emp.Email</td>
                                                <td>@emp.Gender</td>
                                                <td>@emp.Department</td>
                                                <td>@emp.City</td>
                                                <td>
                                                    @CountCredits(emp.EmployeeId)
                                                </td>
                                                <td>
                                                    <button class="btn btn-warning" @onclick="@(async () => await EditEmployee(@emp.EmployeeId))">Edit</button>
                                                    <button class="btn btn-danger" @onclick="@(async () => await DeleteConfirm(@emp.EmployeeId))">Remove</button>

                                                </td>
                                                <td>
                                                    <button class="btn btn-success" @onclick="@(async () => await LinkCoursesConfirm(@emp.EmployeeId))">Add</button>
                                                    <button class="btn btn-danger" @onclick="@(async () => await DeLinkCoursesConfirm(@emp.EmployeeId))">Remove</button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }

                            @if (isAdd)
                            {
                                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h3 class="modal-title">@modalTitle</h3>
                                                <button type="button" class="close" @onclick="@CloseModal">
                                                    <span aria-hidden="true">X</span>
                                                </button>
                                            </div>
                                            <div class="modal-body">
                                                <form>
                                                    <div class="row">
                                                        <div class="col-sm-6">
                                                            <div class="form-group">
                                                                <label for="Name" class="control-label">Name</label>
                                                                <input for="Name" class="form-control" @bind="@emp.FirstName" />
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <div class="form-group">
                                                                <label for="LastName" class="control-label">Surname</label>
                                                                <input for="LastName" class="form-control" @bind="@emp.LastName" />
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="row">
                                                        <div class="col-sm-6">
                                                            <div class="form-group">
                                                                <label for="DateOfBirth" class="control-label">DOB</label>
                                                                <input for="DateOfBirth" class="form-control" @bind="@emp.DateOfBirth" />
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <div class="form-group">
                                                                <label for="PhoneNumber" class="control-label">PhoneNumber</label>
                                                                <input for="PhoneNumber" class="form-control" @bind="@emp.PhoneNumber" />
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="row">
                                                        <div class="col-sm-6">
                                                            <div class="form-group">
                                                                <label for="Email" class="control-label">Email</label>
                                                                <input for="Email" class="form-control" @bind="@emp.Email" />
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <div class="form-group">
                                                                <label asp-for="Department" class="control-label">Department</label>
                                                                <input asp-for="Department" class="form-control" @bind="@emp.Department" />
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="row">
                                                        <div class="col-sm-12">
                                                            <div class="form-group">
                                                                <label asp-for="Gender" class="control-label">Gender</label>
                                                                <select asp-for="Gender" class="form-control" @bind="@emp.Gender">
                                                                    <option value="">-- Select Gender --</option>
                                                                    <option value="Male">Male</option>
                                                                    <option value="Female">Female</option>
                                                                </select>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-12">
                                                            <div class="form-group">
                                                                <label asp-for="City" class="control-label">City</label>
                                                                <select asp-for="City" class="form-control" @bind="@emp.City">
                                                                    <option value="">-- Select City --</option>
                                                                    @foreach (var city in cityList)
                                                                    {
                                                                        <option value="@city.CityName">@city.CityName</option>
                                                                    }
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    @*<div class="row">
                                                            <div class="col-sm-12">
                                                                <div class="form-group">
                                                                    <label asp-for="Course" class="control-label">Course</label>
                                                                    <select asp-for="Course" class="form-control" @bind="@emp.Course">
                                                                        <option value="">-- Select Course --</option>
                                                                        @foreach (var course in courseList)
                                                                        {
                                                                            <option value="@course.Id">@course.CourseName</option>
                                                                        }
                                                                    </select>
                                                                </div>
                                                            </div>
                                                        </div>*@
                                                </form>
                                            </div>
                                            <div class="modal-footer">
                                                <button class="btn btn-block btn-info" @onclick="@(async () => await SaveEmployee())" data-dismiss="modal">Save</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (isDelete)
                            {
                                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h3 class="modal-title">Delete Employee</h3>
                                            </div>
                                            <div class="modal-body">
                                                <h4>Do you want to delete this employee ??</h4>
                                                <table class="table">
                                                    <tr>
                                                        <td>Name</td>
                                                        <td>@emp.FirstName</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Name</td>
                                                        <td>@emp.LastName</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Name</td>
                                                        <td>@emp.DateOfBirth</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Name</td>
                                                        <td>@emp.PhoneNumber</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Name</td>
                                                        <td>@emp.Email</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Gender</td>
                                                        <td>@emp.Gender</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Department</td>
                                                        <td>@emp.Department</td>
                                                    </tr>
                                                    <tr>
                                                        <td>City</td>
                                                        <td>@emp.City</td>
                                                    </tr>
                                                </table>
                                            </div>
                                            <div class="modal-footer">
                                                <button class="btn btn-danger" @onclick="@(async () => await DeleteEmployee(@emp.EmployeeId))" data-dismiss="modal">YES</button>
                                                <button class="btn btn-warning" @onclick="@CloseModal">NO</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (isLink)
                            {
                                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h3 class="modal-title">@modalTitle</h3>
                                            </div>
                                            <div class="modal-body">
                                                @if (employeeCourseList.Count != 0)
                                                {
                                                    <h4>Select courses</h4>
                                                    <table class="table">
                                                        @foreach (var course in employeeCourseList)
                                                        {
                                                            <tr>
                                                                <td>Course Name</td>
                                                                <td>@course.CourseName</td>
                                                                <td>
                                                                    <input type="checkbox" @onchange="eventArgs => { CheckboxClicked(course.CourseId, eventArgs.Value); }" />
                                                                </td>
                                                            </tr>
                                                        }

                                                    </table>
                                                }
                                                else
                                                {
                                                    <h4>No courses to select</h4>
                                                }

                                            </div>
                                            <div class="modal-footer">
                                                @if (employeeCourseList.Count != 0)
                                                {
                                                    <button class="btn btn-danger" @onclick="@(async () => await LinkCourses(selectedEmployeeId,LinkAction))" data-dismiss="modal">Link Courses</button>
                                                }
                                                <button class="btn btn-warning" @onclick="@CloseModal">Close</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }

                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <h1>Authentication Failure!</h1>
                        <p>You're not signed in.</p>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>
    </div>
</section>
<!-- Services section end -->








@code {
    protected long selectedEmployeeId = 0;
    protected List<Employee> empList;
    protected List<Cities> cityList = new List<Cities>();
    protected List<Courses> courseList = new List<Courses>();

    protected List<Courses> employeeCourseList = new List<Courses>();
    public List<string> EmployeeCourses { get; set; } = new List<string>();

    protected Employee emp = new Employee();
    protected string modalTitle { get; set; }
    protected Boolean isDelete = false;
    protected Boolean isAdd = false;
    protected Boolean isLink = false;

    protected Boolean LinkAction = false;

    protected string SearchString { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetCities();
        await GetEmployee();
        await GetCourses();
    }

    protected async Task GetCities()
    {
        try
        {
            cityList = await employeeService.GetCities();
        }
        catch (Exception ex)
        {
            ErrorMessage("GetCities", ex.Message);
        }
    }

    protected async Task GetEmployee()
    {
        try
        {
            empList = await employeeService.GetEmployeeList();
        }
        catch (Exception ex)
        {
            ErrorMessage("GetEmployee", ex.Message);
        }
    }

    protected async Task GetCourses()
    {
        try
        {
            courseList = await employeeService.GetCourses();
        }
        catch (Exception ex)
        {
            ErrorMessage("GetCourses", ex.Message);
        }
    }

    protected async Task FilterEmp()
    {

        try
        {
            await GetEmployee();
            if (SearchString != "")
            {
                empList = empList.Where(x => x.FirstName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
            }

        }
        catch (Exception ex)
        {
            ErrorMessage("FilterEmp", ex.Message);
        }
    }

    protected void AddEmp()
    {


        try
        {
            emp = new Employee();
            this.modalTitle = "Add Employee";
            this.isAdd = true;
        }
        catch (Exception ex)
        {
            ErrorMessage("AddEmp", ex.Message);
        }
    }

    protected async Task EditEmployee(long empID)
    {

        try
        {
            emp = await employeeService.Details(Convert.ToInt32(empID));
            this.modalTitle = "Edit Employee";
            this.isAdd = true;

        }
        catch (Exception ex)
        {
            ErrorMessage("EditEmployee", ex.Message);
        }
    }

    protected async Task SaveEmployee()
    {
        try
        {
            if (emp.EmployeeId != 0)
            {
                await Task.Run(() =>
                {
                    employeeService.Edit(emp);
                });
            }
            else
            {
                await Task.Run(() =>
                {
                    employeeService.Create(emp);
                });
            }
            this.isAdd = false;
            await GetEmployee();
        }
        catch (Exception ex)
        {
            ErrorMessage("SaveEmployee", ex.Message);
        }
    }

    protected async Task DeleteConfirm(long empID)
    {


        try
        {
            emp = await employeeService.Details(Convert.ToInt32(empID));
            this.isDelete = true;
        }
        catch (Exception ex)
        {
            ErrorMessage("DeleteConfirm", ex.Message);
        }
    }

    protected async Task DeleteEmployee(long empID)
    {


        try
        {
            await Task.Run(() =>
       {
           employeeService.Delete(Convert.ToInt32(empID));
       });
            this.isDelete = false;
            await GetEmployee();
        }
        catch (Exception ex)
        {
            ErrorMessage("DeleteEmployee", ex.Message);
        }
    }

    protected void CloseModal()
    {
        this.isAdd = false;
        this.isDelete = false;
        this.isLink = false;
    }

    void CheckboxClicked(int CourseId, object checkedValue)
    {
        try
        {
            if ((bool)checkedValue)
            {
                if (!EmployeeCourses.Contains(CourseId.ToString()))
                {
                    EmployeeCourses.Add(CourseId.ToString());
                }
            }
            else
            {
                if (EmployeeCourses.Contains(CourseId.ToString()))
                {
                    EmployeeCourses.Remove(CourseId.ToString());
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage("CheckboxClicked", ex.Message);
        }
    }

    protected async Task LinkCoursesConfirm(long empID)
    {
        try
        {
            
        this.isLink = true;
        this.modalTitle = "Link Employee";
        this.selectedEmployeeId = empID;
        this.LinkAction = true;
        employeeCourseList = await CourseService.GetEmployeeCourses(empID, true);

        }
        catch (Exception ex)
        {
            ErrorMessage("LinkCoursesConfirm", ex.Message);
        }
    }

    protected async Task DeLinkCoursesConfirm(long empID)
    {
        try
        {
            this.isLink = true;
            this.modalTitle = "De-Link Employee";
            this.selectedEmployeeId = empID;
            this.LinkAction = false;

            employeeCourseList = await CourseService.GetEmployeeCourses(empID, false);
        }
        catch (Exception ex)
        {
            ErrorMessage("DeLinkCoursesConfirm", ex.Message);
        }
    }

    protected async Task LinkCourses(long empID, bool linkAction)
    {
        try
        {
            CourseService.LinkCourses(empID, EmployeeCourses, linkAction);

            this.isLink = false;
            await GetEmployee();
        }
        catch (Exception ex)
        {
            ErrorMessage("LinkCourses", ex.Message);
        }

    }

    protected double CountCredits(long Id)
    {
        var count = 0.0;
        try
        {
            count = CourseService.CountCredits(Id);
            return count;
        }
        catch (Exception ex)
        {
            ErrorMessage("CountCredits", ex.Message);
        }

        return count;
    }

    protected void ErrorMessage(string header, string Errormessage)
    {
        var message = header + ": " + Errormessage;
        JSRuntime.InvokeVoidAsync("ShowErrorMessage", message);

        Logger.LogWarning(Errormessage, message);
    }
}
